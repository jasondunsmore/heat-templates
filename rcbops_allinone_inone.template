heat_template_version: 2013-05-23

description: |
  A template implementation of a resource that provides an Openstack installation using the Rackspace Private Cloud Software.

parameters:

  flavor:
    description: Rackspace Cloud Server flavor (Size)
    type: String 
    default: 4GB Standard Instance
    constraints:
    - allowed_values:
      - 4GB Standard Instance
      - 8GB Standard Instance
      - 15GB Standard Instance
      - 30GB Standard Instance
      description: Must be a valid Rackspace Cloud Server flavor large enough to run Chef and Openstack, Default is 4GB.

  server_name:
    type: String
    default: RackspacePrivateCloudDemo
    description: The Instance Name

resources:

  private_cloud_server: 
    type: "Rackspace::Cloud::Server"
    properties:
      flavor: { get_param: flavor }
      image: Ubuntu 12.04 LTS (Precise Pangolin)
      name: { get_param: server_name }
      user_data: |
        #!/usr/bin/env bash
        set -v
        # Make the system key used for bootstrapping self
        yes '' | ssh-keygen -t rsa -f /root/.ssh/id_rsa -N ''
        pushd /root/.ssh/
        cat id_rsa.pub >> authorized_keys
        popd

        # Upgrade packages and repo list.
        apt-get update && apt-get -y upgrade
        apt-get install -y rabbitmq-server git curl lvm2

        # Set Rabbit Pass
        export CHEF_RMQ_PW=$(tr -dc 'a-zA-Z0-9' < /dev/urandom | head -c 24)

        # Configure Rabbit
        rabbitmqctl add_vhost /chef
        rabbitmqctl add_user chef ${CHEF_RMQ_PW}
        rabbitmqctl set_permissions -p /chef chef '.*' '.*' '.*'

        # Download/Install Chef
        wget -O /tmp/chef_server.deb 'https://www.opscode.com/chef/download-server?p=ubuntu&pv=12.04&m=x86_64'
        dpkg -i /tmp/chef_server.deb

        # Configure Chef Vars.
        mkdir /etc/chef-server
        cat > /etc/chef-server/chef-server.rb <<EOF
        nginx["ssl_port"] = 4000
        nginx["non_ssl_port"] = 4080
        nginx["enable_non_ssl"] = true
        rabbitmq["enable"] = false
        rabbitmq["password"] = "${CHEF_RMQ_PW}"
        bookshelf['url'] = "https://#{node['ipaddress']}:4000"
        EOF

        # Reconfigure Chef.
        chef-server-ctl reconfigure

        # Install Chef Client.
        bash <(wget -O - http://opscode.com/chef/install.sh)

        # Configure Knife.
        mkdir /root/.chef
        cat > /root/.chef/knife.rb <<EOF
        log_level                :info
        log_location             STDOUT
        node_name                'admin'
        client_key               '/etc/chef-server/admin.pem'
        validation_client_name   'chef-validator'
        validation_key           '/etc/chef-server/chef-validator.pem'
        chef_server_url          'https://localhost:4000'
        cache_options( :path => '/root/.chef/checksums' )
        cookbook_path            [ '/opt/allinoneinone/chef-cookbooks/cookbooks' ]
        EOF

        # Get RcbOps Cookbooks.
        mkdir -p /opt/allinoneinone
        git clone -b grizzly git://github.com/rcbops/chef-cookbooks.git /opt/allinoneinone/chef-cookbooks
        pushd /opt/allinoneinone/chef-cookbooks
        git submodule init
        git checkout v4.1.0
        git submodule update
        knife cookbook site download -f /tmp/cron.tar.gz cron 1.2.6 && tar xf /tmp/cron.tar.gz -C /opt/allinoneinone/chef-cookbooks/cookbooks
        knife cookbook site download -f /tmp/chef-client.tar.gz chef-client 3.0.6 && tar xf /tmp/chef-client.tar.gz -C /opt/allinoneinone/chef-cookbooks/cookbooks

        knife cookbook upload -o /opt/allinoneinone/chef-cookbooks/cookbooks -a
        knife role from file /opt/allinoneinone/chef-cookbooks/roles/*.rb

        # Set rcbops Chef Environment.
        curl --silent https://raw.github.com/rsoprivatecloud/openstack-chef-deploy/master/environments/grizzly.json > allinoneinone.json.original

        # Set the Default Chef Environment
        $(which python) << EOF
        import json
        import subprocess

        _ohai = subprocess.Popen(['ohai', '-l', 'fatal'], stdout=subprocess.PIPE)
        ohai = _ohai.communicate()[0]
        data = json.loads(ohai)

        def get_network(interface):
            device = data['network']['interfaces'].get(interface)
            if device is not None:
                if device.get('routes'):
                    routes = device['routes']
                    for net in routes:
                        if 'scope' in net:
                            return net.get('destination', '127.0.0.0/8')
                            break
                else:
                    return '127.0.0.0/8'
            else:
                return '127.0.0.0/8'

        network = get_network(interface='eth2')

        with open('allinoneinone.json.original', 'rb') as rcbops:
            env = json.loads(rcbops.read())

        env['name'] = 'allinoneinone'
        env['description'] = 'OpenStack Test All-In-One Deployment in One Server'
        override = env['override_attributes']
        users = override['keystone']['users']
        users['admin']['password'] = 'secrete'
        override['glance']['image_upload'] = True
        override['nova'].update({'libvirt': {'virt_type': "qemu"}})
        override['developer_mode'] = True
        override['osops_networks']['management'] = network
        override['osops_networks']['public'] = network
        override['osops_networks']['nova'] = network
        override['mysql']['root_network_acl'] = "%"

        override.pop('hardware', None)
        override.pop('enable_monit', None)
        override.pop('monitoring', None)

        with open('allinoneinone.json', 'wb') as rcbops:
            rcbops.write(json.dumps(env, indent=2))

        EOF

        # Upload Environment
        knife environment from file allinoneinone.json

        # Exit Work Dir
        popd

        # Export Chef URL
        export CHEF_SERVER_URL=https://$(ohai ipaddress | awk '/^ / {gsub(/ *\"/, ""); print; exit}'):4000

        # Set Cinder Data
        export CINDER="/opt/cinder.img"
        export LOOP=$(losetup -f)

        # Make Cinder Device
        dd if=/dev/zero of=${CINDER} bs=1 count=0 seek=50G
        losetup ${LOOP} ${CINDER}
        pvcreate ${LOOP}
        vgcreate cinder-volumes ${LOOP}

        # Set Cinder Device as Persistent
        echo -e 'LOOP=$(losetup -f)\nCINDER="/opt/cinder.img"\nlosetup ${LOOP} ${CINDER}' | tee /etc/rc.local

        # Begin Cooking
        knife bootstrap localhost -E allinoneinone -r 'role[allinone],role[cinder-all]'


outputs:
  
  public_ip:
    value: { get_attr: [ private_cloud_server, PublicIp ] }
    description: The public IP address of the newly configured Server.
